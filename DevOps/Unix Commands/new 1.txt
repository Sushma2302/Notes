Process Management: 

Whenever you issue a command in Unix, it creates, or starts, a new process. 
The operating system tracks processes through a five-digit ID number known as the pid or the process ID. Each process in the system has a unique pid.

Pids eventually repeat because all the possible numbers are used up and the next pid rolls or starts over. 
At any point of time, no two processes with the same pid exist in the system because it is the pid that Unix uses to track each process.

When you start a process (run a command), there are two ways you can run it −

Foreground Processes
Background Processes

By default, every process that you start runs in the foreground. It gets its input from the keyboard and sends its output to the screen.

A background process runs without being connected to your keyboard. If the background process requires any keyboard input, it waits.
The simplest way to start a background process is to add an ampersand (&) at the end of the command.

To know the running processes : ps -f

UID

User ID that this process belongs to (the person running it)

PID

Process ID

PID

Parent process ID (the ID of the process that started it)

C

CPU utilization of process

STIME

Process start time

TTY

Terminal type associated with the process

TIME

CPU time taken by the process

CMD

The command that started this process


-a

Shows information about all users

-x

Shows information about processes without terminals

-u

Shows additional information like -f option

-e

Displays extended information


Parent and Child Processes
Each unix process has two ID numbers assigned to it: The Process ID (pid) and the Parent process ID (ppid). Each user process in the system has a parent process.


Zombie and Orphan Processes
Normally, when a child process is killed, the parent process is updated via a SIGCHLD signal. Then the parent can do some other task or restart a new child as needed. 
However, sometimes the parent process is killed before its child is killed. In this case, the "parent of all processes," the init process, becomes the new 
PPID (parent process ID). In some cases, these processes are called orphan processes.

When a process is killed, a ps listing may still show the process with a Z state. This is a zombie or defunct process. The process is dead and not being used. 
These processes are different from the orphan processes. They have completed execution but still find an entry in the process table.

Daemon Processes
Daemons are system-related background processes that often run with the permissions of root and services requests from other processes.

A daemon has no controlling terminal. It cannot open /dev/tty. If you do a "ps -ef" and look at the tty field, all daemons will have a ? for the tty.

To be precise, a daemon is a process that runs in the background, usually waiting for something to happen that it is capable of working with. For example, a printer daemon waiting for print commands.

If you have a program that calls for lengthy processing, then it’s worth to make it a daemon and run it in the background.


The top Command
The top command is a very useful tool for quickly showing processes sorted by various criteria.

It is an interactive diagnostic tool that updates frequently and shows information about physical and virtual memory, CPU usage, load averages, and your busy processes.